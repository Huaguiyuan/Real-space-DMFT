!########################################################
!     Program  : DHMMPT
!     TYPE     : Main program
!     PURPOSE  : 
!     AUTHORS  : Adriano Amaricci
!########################################################
MODULE COMMON_BROYDN
  USE BROYDEN
  implicit none
  real(8)                :: xmu0,n,n0
  complex(8),allocatable :: fg(:,:),sigma(:,:)
  complex(8),allocatable :: fg0(:),gamma(:)
END MODULE COMMON_BROYDN



function funcv(x)
  USE RDMFT_VARS_GLOBAL
  USE COMMON_BROYDN
  USE TOOLS
  implicit none
  real(8),dimension(:),intent(in)  ::  x
  real(8),dimension(size(x))       ::  funcv
  xmu0=x(1)
  fg0 = one/(one/gamma +xmu-xmu0-U*(n-0.5d0))
  n0=sum(fermi(wr,beta)*aimag(fg0))/sum(aimag(fg0))
  funcv(1)=n-n0
  write(101+mpiID,"(3(f13.9))")n,n0,xmu0
end function funcv



program hmmpt
  USE RDMFT_VARS_GLOBAL
  USE COMMON_BROYDN
  implicit none
  integer    :: i,is
  real(8)    :: x(1),r
  logical    :: check,converged  


  !GLOBAL INITIALIZATION:
  !=====================================================================
  include "init_global_disorder.f90"

  !ALLOCATE WORKING ARRAYS:
  !=====================================================================
  allocate(wr(L))
  allocate(fg(Ns,L),sigma(Ns,L))
  allocate(fg0(L),gamma(L))
  wr=linspace(-wmax,wmax,L,mesh=fmesh)



  !START DMFT LOOP SEQUENCE:SOLVE FOR \SIGMA^(N)_II(W)=SIGMA, G^(N)_II(W)=FG
  call setup_initial_sigma()
  iloop=0 ; converged=.false.
  do while(.not.converged)
     iloop=iloop+1
     call start_loop(iloop,nloop,"DMFT-loop")

     !SOLVE G_II (GLOCAL) \FORALL FREQUENCY W\IN[-WMAX,WMAX]
     call get_gloc_mpi()

     !SOLVE IMPURITY MODEL, FOR ALL LATTICE SITES:
     call solve_impurity_mpi()

     converged=check_convergence(sigma(:,:),eps_error,Nsuccess,nloop,id=0)
     if(nread/=0.d0)call search_mu(converged)
     call MPI_BCAST(converged,1,MPI_LOGICAL,0,MPI_COMM_WORLD,mpiERR)
     call print_out(converged)
     call end_loop()
  enddo
  if(mpiID==0)call system("mv -vf *.err "//trim(adjustl(trim(name_dir)))//"/")
  call close_mpi()

contains
  include "solve_routines.f90"
end program hmmpt


